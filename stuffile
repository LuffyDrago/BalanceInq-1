kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
https://itnext.io/big-change-in-k8s-1-24-about-serviceaccounts-and-their-secrets-4b909a4af4e0


cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: cicd
spec:
  serviceAccount: cicd
  containers:
  - image: nginx
    name: cicd
EOF






k exec cicd -- cat /run/secrets/kubernetes.io/serviceaccount/token && echo

sudo rm /etc/cni/net.d/10-calico.conflistsudo rm /etc/cni/net.d/calico-kubeconfig





#Run these on all your servers that will be part of the Kubernetes cluster

#Config firewall
sudo -i
  firewall-cmd --permanent --add-port=6443/tcp
  firewall-cmd --permanent --add-port=2379-2380/tcp
  firewall-cmd --permanent --add-port=10250/tcp
  firewall-cmd --permanent --add-port=10251/tcp
  firewall-cmd --permanent --add-port=10252/tcp
  firewall-cmd --permanent --add-port=10255/tcp 
  #Also opne dynaic ports 30000 to 32767 for "NodePort" access.
  firewall-cmd --permanent --add-port=30000-32767/tcp
  firewall-cmd --zone=trusted --permanent --add-source=192.168.0.0/24
  firewall-cmd --add-masquerade --permanent
  
  #Netfilter offers various functions and operations for packet filtering, network address translation, and port translation, which provide the functionality required for directing packets through a network 
  #modprobe - program to add and remove modules from the Linux Kernel
  modprobe br_netfilter
  systemctl restart firewalld
exit


#Add both servers to hosts file
sudo nano /etc/hosts
192.168.0.20    kube-master
192.168.0.21    kube-node1

# Docker packages are not available anymore on CentOS 8 or RHEL 8 package repositories, so run following dnf command to enable Docker CE package repository.
sudo dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo

#Install Docker
sudo dnf install docker-ce --nobest -y --allowerasing

#Start and enable the Docker daemon
sudo systemctl enable --now docker

#Add your user to the docker group
sudo usermod -aG docker $USER

#logoof and log back in
exit
ssh YOUR_ID@NODE_YOU_WERE_WORKING_ON

#Veiry docker installed correctly
docker --version
docker run hello-world

#Now we can install Kubernetes on CentOS. First, we must create a new repository:
sudo nano /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg

#Install Kubernetes
sudo dnf install -y kubelet kubeadm kubectl --disableexcludes=kubernetes

#Modify kubelet file
sudo nano /etc/sysconfig/kubelet
KUBELET_EXTRA_ARGS= --runtime-cgroups=/systemd/system.slice --kubelet-cgroups=/systemd/system.slice

#Start the Kubernetes service
sudo systemctl enable --now kubelet

#Now weâ€™re going to have to su to the root user and then create a new file (to help configure iptables):
sudo -i
  nano /etc/sysctl.d/k8s.conf
  net.bridge.bridge-nf-call-ip6tables = 1
  net.bridge.bridge-nf-call-iptables = 1

  #Load the new configuration
  sysctl --system
  
  #Disable swap
  sudo swapoff -a
  #Also premanently disable swap
  sudo nano /etc/fstab
      #/dev/mapper/cl-swap

  #Create a docker Daemon File  
  nano /etc/docker/daemon.json
  {
    "exec-opts": ["native.cgroupdriver=systemd"],
    "log-driver": "json-file",
    "log-opts": {
      "max-size": "100m"
    },
    "storage-driver": "overlay2",
    "storage-opts": [
      "overlay2.override_kernel_check=true"
    ]
  }   

  mkdir -p /etc/systemd/system/docker.service.d
  systemctl daemon-reload
  systemctl restart docker
exit

ssh YOUR_ID@MASTER_IP_ADDRESS

sudo kubeadm init 

 mkdir -p $HOME/.kube

sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml 

#SCP this to all your worker nodes
scp -r $HOME/.kube user_name@192.168.0.21:/home/YOUR_HOME_DIRECTORY

#Do the following on all your worker node:
ssh YOUR_ID@WORKER_NODE__IP_ADDRESS
    
sudo -i 
    #Copy the join command, token and cert from "kubeadm init" operation and run it below
    kubeadm join ----
exit






sudo kubeadm init --api-server-advertise-address=[your ip address] --pod-network-cidr=192.168.59.0/16


kubeadm join 192.168.0.65:6443 --token 7952q8.d42as2o8jz1cdld6 \
	--discovery-token-ca-cert-hash sha256:3cba4ed4564ddcd4b1ed17c0f542a2611edf9cbcce490ea78cf24c9b7d1a31ba 




cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins
  namespace: devopstools
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: jenkins
  namespace: default
  labels:
    "app.kubernetes.io/name": 'jenkins'
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get","list","watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jenkins-role-binding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jenkins
subjects:
- kind: ServiceAccount
  name: jenkins
  namespace: devopstools
EOF



 






[14:46] Agnes Mueni
kubectl get pod --namespace kube-system -l app=flannel

[14:46] Agnes Mueni
kubectl logs --namespace kube-system <POD_ID> -c kube-flannel

netstat -ltnp | grep -w ":10250"
sudo netstat -nlpt|grep :10250
